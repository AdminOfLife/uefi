diff --git a/ArmPkg/Library/ArmLib/AArch64/AArch64Mmu.c b/ArmPkg/Library/ArmLib/AArch64/AArch64Mmu.c
index d6f3904..1d109f5 100644
--- a/ArmPkg/Library/ArmLib/AArch64/AArch64Mmu.c
+++ b/ArmPkg/Library/ArmLib/AArch64/AArch64Mmu.c
@@ -38,7 +38,7 @@ ArmMemoryAttributeToPageAttribute (
   case ARM_MEMORY_REGION_ATTRIBUTE_WRITE_THROUGH:
     return TT_ATTR_INDX_MEMORY_WRITE_THROUGH;
   case ARM_MEMORY_REGION_ATTRIBUTE_DEVICE:
-    return TT_ATTR_INDX_DEVICE_MEMORY;
+    return (TT_ATTR_INDX_DEVICE_MEMORY | TT_UXN_MASK);
   case ARM_MEMORY_REGION_ATTRIBUTE_UNCACHED_UNBUFFERED:
     return TT_ATTR_INDX_MEMORY_NON_CACHEABLE;
   case ARM_MEMORY_REGION_ATTRIBUTE_NONSECURE_WRITE_BACK:
@@ -601,6 +601,8 @@ ArmConfigureMmu (
   if (TranslationTable == NULL) {
     return RETURN_OUT_OF_RESOURCES;
   }
+
+  DEBUG((EFI_D_ERROR, "[%a]:[%dL] TranslationTable=0x%X\n", __FUNCTION__, __LINE__, TranslationTable));
   // We set TTBR0 just after allocating the table to retrieve its location from the subsequent
   // functions without needing to pass this value across the functions. The MMU is only enabled
   // after the translation tables are populated.
@@ -622,7 +624,7 @@ ArmConfigureMmu (
   ArmDisableInstructionCache ();
 
   // Make sure nothing sneaked into the cache
-  ArmCleanInvalidateDataCache ();
+  //ArmCleanInvalidateDataCache ();
   ArmInvalidateInstructionCache ();
 
   TranslationTableAttribute = TT_ATTR_INDX_INVALID;
