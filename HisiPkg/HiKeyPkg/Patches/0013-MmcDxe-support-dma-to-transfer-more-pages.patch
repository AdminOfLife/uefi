From ed515f4b12acc75b7c2139dc17b0f31db0e218e7 Mon Sep 17 00:00:00 2001
From: Haojian Zhuang <haojian.zhuang@linaro.org>
Date: Thu, 26 Feb 2015 14:34:44 +0800
Subject: [PATCH 13/43] MmcDxe: support dma to transfer more pages

Add the interface to transfer more pages. If vendor's driver return TRUE
on IsDmaSupported(), eMMC stack could transfer more pages in one
transimission. Otherwise, eMMC stack will only transfer one page at one
time.

Signed-off-by: Haojian Zhuang <haojian.zhuang@linaro.org>
---
 EmbeddedPkg/Include/Protocol/MmcHost.h    |   5 +
 EmbeddedPkg/Universal/MmcDxe/MmcBlockIo.c | 208 +++++++++++++++++++++---------
 2 files changed, 153 insertions(+), 60 deletions(-)

diff --git a/EmbeddedPkg/Include/Protocol/MmcHost.h b/EmbeddedPkg/Include/Protocol/MmcHost.h
index 8744685..ad6f9fd 100644
--- a/EmbeddedPkg/Include/Protocol/MmcHost.h
+++ b/EmbeddedPkg/Include/Protocol/MmcHost.h
@@ -107,6 +107,10 @@ typedef BOOLEAN (EFIAPI *MMC_ISREADONLY) (
   IN  EFI_MMC_HOST_PROTOCOL   *This
   );
 
+typedef BOOLEAN (EFIAPI *MMC_ISDMASUPPORTED) (
+  IN  EFI_MMC_HOST_PROTOCOL   *This
+  );
+
 typedef EFI_STATUS (EFIAPI *MMC_BUILDDEVICEPATH) (
   IN  EFI_MMC_HOST_PROTOCOL     *This,
   OUT EFI_DEVICE_PATH_PROTOCOL  **DevicePath
@@ -156,6 +160,7 @@ struct _EFI_MMC_HOST_PROTOCOL {
   UINT32                  Revision;
   MMC_ISCARDPRESENT       IsCardPresent;
   MMC_ISREADONLY          IsReadOnly;
+  MMC_ISDMASUPPORTED      IsDmaSupported;
   MMC_BUILDDEVICEPATH     BuildDevicePath;
 
   MMC_NOTIFYSTATE         NotifyState;
diff --git a/EmbeddedPkg/Universal/MmcDxe/MmcBlockIo.c b/EmbeddedPkg/Universal/MmcDxe/MmcBlockIo.c
index 0e1ef57..b36d331 100644
--- a/EmbeddedPkg/Universal/MmcDxe/MmcBlockIo.c
+++ b/EmbeddedPkg/Universal/MmcDxe/MmcBlockIo.c
@@ -126,6 +126,90 @@ MmcStopTransmission (
 #define MMCI0_BLOCKLEN 512
 #define MMCI0_TIMEOUT  10000
 
+static EFI_STATUS
+MmcTransferBlock (
+  IN EFI_BLOCK_IO_PROTOCOL    *This,
+  IN UINTN                    Cmd,
+  IN UINTN                    Transfer,
+  IN UINT32                   MediaId,
+  IN EFI_LBA                  Lba,
+  IN UINTN                    BufferSize,
+  OUT VOID                    *Buffer
+  )
+{
+  EFI_STATUS              Status;
+  MMC_HOST_INSTANCE       *MmcHostInstance;
+  EFI_MMC_HOST_PROTOCOL   *MmcHost;
+  INTN                    Timeout;
+  UINTN                   CmdArg;
+  UINT32                  Response[4];
+
+  MmcHostInstance = MMC_HOST_INSTANCE_FROM_BLOCK_IO_THIS (This);
+  ASSERT (MmcHostInstance != NULL);
+  MmcHost = MmcHostInstance->MmcHost;
+  ASSERT (MmcHost);
+
+  //Set command argument based on the card access mode (Byte mode or Block mode)
+  if (MmcHostInstance->CardInfo.OCRData.AccessMode & BIT1) {
+    CmdArg = Lba;
+  } else {
+    CmdArg = Lba * This->Media->BlockSize;
+  }
+
+  Status = MmcHost->SendCommand (MmcHost, Cmd, CmdArg);
+  if (EFI_ERROR (Status)) {
+    DEBUG ((EFI_D_ERROR, "MmcIoBlocks(MMC_CMD%d): Error %r\n", Cmd, Status));
+    return Status;
+  }
+
+  if (Transfer == MMC_IOBLOCKS_READ) {
+    // Read one block of Data
+    Status = MmcHost->ReadBlockData (MmcHost, Lba, BufferSize, Buffer);
+    if (EFI_ERROR (Status)) {
+      DEBUG ((EFI_D_BLKIO, "MmcIoBlocks(): Error Read Block Data and Status = %r\n", Status));
+      MmcStopTransmission (MmcHost);
+      return Status;
+    }
+    Status = MmcNotifyState (MmcHostInstance, MmcProgrammingState);
+    if (EFI_ERROR (Status)) {
+      DEBUG ((EFI_D_ERROR, "MmcIoBlocks() : Error MmcProgrammingState\n"));
+      return Status;
+    }
+  } else {
+    // Write one block of Data
+    Status = MmcHost->WriteBlockData (MmcHost, Lba, BufferSize, Buffer);
+    if (EFI_ERROR (Status)) {
+      DEBUG ((EFI_D_BLKIO, "MmcIoBlocks(): Error Write Block Data and Status = %r\n", Status));
+      MmcStopTransmission (MmcHost);
+      return Status;
+    }
+  }
+
+  // Command 13 - Read status and wait for programming to complete (return to tran)
+  Timeout = MMCI0_TIMEOUT;
+  CmdArg = MmcHostInstance->CardInfo.RCA << 16;
+  Response[0] = 0;
+  while(   (!(Response[0] & MMC_R0_READY_FOR_DATA))
+        && (MMC_R0_CURRENTSTATE (Response) != MMC_R0_STATE_TRAN)
+        && Timeout--) {
+    Status = MmcHost->SendCommand (MmcHost, MMC_CMD13, CmdArg);
+    if (!EFI_ERROR (Status)) {
+      MmcHost->ReceiveResponse (MmcHost, MMC_RESPONSE_TYPE_R1, Response);
+      if ((Response[0] & MMC_R0_READY_FOR_DATA)) {
+        break;  // Prevents delay once finished
+      }
+    }
+    gBS->Stall (1);
+  }
+
+  Status = MmcNotifyState (MmcHostInstance, MmcTransferState);
+  if (EFI_ERROR (Status)) {
+    DEBUG ((EFI_D_ERROR, "MmcIoBlocks() : Error MmcTransferState\n"));
+    return Status;
+  }
+  return Status;
+}
+
 EFI_STATUS
 MmcIoBlocks (
   IN EFI_BLOCK_IO_PROTOCOL    *This,
@@ -145,8 +229,8 @@ MmcIoBlocks (
   EFI_MMC_HOST_PROTOCOL   *MmcHost;
   UINTN                   BytesRemainingToBeTransfered;
   UINTN                   BlockCount;
+  BOOLEAN		  IsDmaSupported = FALSE;
 
-  BlockCount = 1;
   MmcHostInstance = MMC_HOST_INSTANCE_FROM_BLOCK_IO_THIS (This);
   ASSERT (MmcHostInstance != NULL);
   MmcHost = MmcHostInstance->MmcHost;
@@ -165,6 +249,11 @@ MmcIoBlocks (
     return EFI_NO_MEDIA;
   }
 
+  // Check if DMA is supported
+  if (MmcHost->IsDmaSupported) {
+    IsDmaSupported = MmcHost->IsDmaSupported (MmcHost);
+  }
+
   // All blocks must be within the device
   if ((Lba + (BufferSize / This->Media->BlockSize)) > (This->Media->LastBlock + 1)) {
     return EFI_INVALID_PARAMETER;
@@ -210,73 +299,72 @@ MmcIoBlocks (
       return EFI_NOT_READY;
     }
 
-    //Set command argument based on the card access mode (Byte mode or Block mode)
-    if (MmcHostInstance->CardInfo.OCRData.AccessMode & BIT1) {
-      CmdArg = Lba;
-    } else {
-      CmdArg = Lba * This->Media->BlockSize;
-    }
-
-    if (Transfer == MMC_IOBLOCKS_READ) {
-      // Read a single block
-      Cmd = MMC_CMD17;
-    } else {
-      // Write a single block
-      Cmd = MMC_CMD24;
-    }
-    Status = MmcHost->SendCommand (MmcHost, Cmd, CmdArg);
-    if (EFI_ERROR (Status)) {
-      DEBUG ((EFI_D_ERROR, "MmcIoBlocks(MMC_CMD%d): Error %r\n", Cmd, Status));
-      return Status;
-    }
-
-    if (Transfer == MMC_IOBLOCKS_READ) {
-      // Read one block of Data
-      Status = MmcHost->ReadBlockData (MmcHost, Lba, This->Media->BlockSize, Buffer);
-      if (EFI_ERROR (Status)) {
-        DEBUG ((EFI_D_BLKIO, "MmcIoBlocks(): Error Read Block Data and Status = %r\n", Status));
-        MmcStopTransmission (MmcHost);
-        return Status;
+    if (IsDmaSupported == TRUE) {
+      BlockCount = (BufferSize + This->Media->BlockSize - 1) / This->Media->BlockSize;
+      if (Transfer == MMC_IOBLOCKS_READ) {
+	CmdArg = BlockCount & 0xffff;
+      } else { // Transfer
+        CmdArg = (BlockCount & 0xffff) | (1 << 24);
+      } 
+      Timeout = 20;
+      while (Timeout > 0) {
+        Status = MmcHost->SendCommand (MmcHost, MMC_CMD23, CmdArg);
+        if (!EFI_ERROR (Status)) {
+	  break;
+        }
+	MmcStopTransmission (MmcHost);
+	Timeout--;
+      }
+      Response[0] = 0;
+      Timeout = 20;
+      while(   (!(Response[0] & MMC_R0_READY_FOR_DATA))
+            && (MMC_R0_CURRENTSTATE (Response) != MMC_R0_STATE_TRAN)
+            && Timeout--) {
+        CmdArg = MmcHostInstance->CardInfo.RCA << 16;
+        Status = MmcHost->SendCommand (MmcHost, MMC_CMD13, CmdArg);
+        if (!EFI_ERROR (Status)) {
+          MmcHost->ReceiveResponse (MmcHost, MMC_RESPONSE_TYPE_R1, Response);
+        }
+      }
+
+      if (0 == Timeout) {
+        DEBUG ((EFI_D_ERROR, "The Card is busy\n"));
+        return EFI_NOT_READY;
+      }
+
+      if (Transfer == MMC_IOBLOCKS_READ) {
+	// Read multiple blocks
+	Cmd = MMC_CMD18;
+      } else {
+	// Write multiple blocks
+        Cmd = MMC_CMD25;
       }
-      Status = MmcNotifyState (MmcHostInstance, MmcProgrammingState);
+      Status = MmcTransferBlock (This, Cmd, Transfer, MediaId, Lba,
+				 BlockCount * This->Media->BlockSize, Buffer);
       if (EFI_ERROR (Status)) {
-        DEBUG ((EFI_D_ERROR, "MmcIoBlocks() : Error MmcProgrammingState\n"));
-        return Status;
+	DEBUG ((EFI_D_ERROR, "Failed to transfer data with dma\n"));
+	return EFI_NOT_READY;
       }
-    } else {
-      // Write one block of Data
-      Status = MmcHost->WriteBlockData (MmcHost, Lba, This->Media->BlockSize, Buffer);
-      if (EFI_ERROR (Status)) {
-        DEBUG ((EFI_D_BLKIO, "MmcIoBlocks(): Error Write Block Data and Status = %r\n", Status));
-        MmcStopTransmission (MmcHost);
-        return Status;
+      BytesRemainingToBeTransfered -= BlockCount * This->Media->BlockSize;
+    } else { // IsDmaSupported
+      BlockCount = 1;
+      if (Transfer == MMC_IOBLOCKS_READ) {
+         // Read a single block
+         Cmd = MMC_CMD17;
+      } else {
+        // Write a single block
+        Cmd = MMC_CMD24;
       }
-    }
-
-    // Command 13 - Read status and wait for programming to complete (return to tran)
-    Timeout = MMCI0_TIMEOUT;
-    CmdArg = MmcHostInstance->CardInfo.RCA << 16;
-    Response[0] = 0;
-    while(   (!(Response[0] & MMC_R0_READY_FOR_DATA))
-          && (MMC_R0_CURRENTSTATE (Response) != MMC_R0_STATE_TRAN)
-          && Timeout--) {
-      Status = MmcHost->SendCommand (MmcHost, MMC_CMD13, CmdArg);
-      if (!EFI_ERROR (Status)) {
-        MmcHost->ReceiveResponse (MmcHost, MMC_RESPONSE_TYPE_R1, Response);
-        if ((Response[0] & MMC_R0_READY_FOR_DATA)) {
-          break;  // Prevents delay once finished
-        }
+      Status = MmcTransferBlock (This, Cmd, Transfer, MediaId, Lba,
+		      		 This->Media->BlockSize, Buffer);
+      if (EFI_ERROR (Status)) {
+	DEBUG ((EFI_D_ERROR, "Failed to transfer data without dma\n"));
+	return EFI_NOT_READY;
       }
       gBS->Stall (1);
+      BytesRemainingToBeTransfered -= This->Media->BlockSize;
     }
 
-    Status = MmcNotifyState (MmcHostInstance, MmcTransferState);
-    if (EFI_ERROR (Status)) {
-      DEBUG ((EFI_D_ERROR, "MmcIoBlocks() : Error MmcTransferState\n"));
-      return Status;
-    }
-
-    BytesRemainingToBeTransfered -= This->Media->BlockSize;
     Lba    += BlockCount;
     Buffer = (UINT8 *)Buffer + This->Media->BlockSize;
   }
-- 
1.9.1

